import { Injectable } from '@angular/core';
import { io, Socket } from 'socket.io-client';
import { BehaviorSubject } from 'rxjs';
import { WebSocketDebug } from '../utils/websocket-debug';

export type TodoItem = {
  id: number;
  title: string;
  content: string;
  f_done: boolean;
};

@Injectable({
  providedIn: 'root',
})
export class TodoService {
  private socket: Socket | null = null;
  private readonly todoItemsSubject = new BehaviorSubject<TodoItem[]>([]);
  public readonly todoItems$ = this.todoItemsSubject.asObservable();

  constructor() {
    this.initializeSocket();
  }

  private initializeSocket(): void {
    console.log('üîå [WEBSOCKET] === INITIALIZING WEBSOCKET ===');
    console.log('üîå [WEBSOCKET] Connecting to default namespace: /');
    console.log('üîå [WEBSOCKET] Current cookies before init:', document.cookie);
    console.log('üîå [WEBSOCKET] Current URL:', window.location.href);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∞–º–∏ –≤ WebSocket
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É namespace —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    this.socket = io('/', {
      withCredentials: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏
      transports: ['websocket', 'polling'], // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      autoConnect: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      forceNew: false, // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—É–º–µ–Ω—å—à–∞–µ—Ç ECONNABORTED)
      timeout: 10000, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
      path: '/socket.io/', // –ü—É—Ç—å –∫ Socket.IO
      reconnection: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      reconnectionDelay: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      reconnectionAttempts: 5, // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
    });

    console.log('üîå [WEBSOCKET] Socket instance created with config:', {
      namespace: '/',
      withCredentials: true,
      transports: ['websocket', 'polling'],
      autoConnect: true,
      forceNew: false,
      timeout: 10000,
      path: '/socket.io/',
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionAttempts: 5
    });

    this.setupSocketListeners();
    console.log('üîå [WEBSOCKET] === INITIALIZATION COMPLETE ===');
  }

  private setupSocketListeners(): void {
    if (!this.socket) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect', () => {
      console.log('üü¢ [WEBSOCKET] === CONNECTION ESTABLISHED ===');
      console.log('üü¢ [WEBSOCKET] WebSocket connected successfully');
      console.log('üü¢ [WEBSOCKET] Socket ID:', this.socket?.id);
      console.log('üü¢ [WEBSOCKET] Transport:', this.socket?.io?.engine?.transport?.name);
      console.log('üü¢ [WEBSOCKET] Cookies at connection:', document.cookie);
      WebSocketDebug.diagnoseWebSocketState(this.socket);
      console.log('üü¢ [WEBSOCKET] === CONNECTION END ===');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('disconnect', (reason) => {
      console.log('üî¥ [WEBSOCKET] === DISCONNECTION ===');
      console.log('üî¥ [WEBSOCKET] WebSocket disconnected:', reason);
      console.log('üî¥ [WEBSOCKET] Timestamp:', new Date().toISOString());
      WebSocketDebug.logWebSocketError(reason, 'Disconnect');
      console.log('üî¥ [WEBSOCKET] === DISCONNECT END ===');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect_error', (error) => {
      console.error('‚ùå [WEBSOCKET] === CONNECTION ERROR ===');
      console.error('‚ùå [WEBSOCKET] WebSocket connection error:', error);
      console.error('‚ùå [WEBSOCKET] Error details:', {
        message: error.message,
        name: error.name,
        stack: error.stack
      });
      console.error('‚ùå [WEBSOCKET] Current cookies:', document.cookie);
      WebSocketDebug.logWebSocketError(error, 'Connection Error');
      console.error('‚ùå [WEBSOCKET] === CONNECTION ERROR END ===');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.socket.on('auth_error', (error) => {
      console.error('üö´ [WEBSOCKET] === AUTH ERROR ===');
      console.error('üö´ [WEBSOCKET] WebSocket authentication error:', error);
      console.error('üö´ [WEBSOCKET] Current cookies:', document.cookie);
      WebSocketDebug.logWebSocketError(error, 'Authentication Error');
      console.error('üö´ [WEBSOCKET] === AUTH ERROR END ===');
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ todos
    this.socket.on('todos', (todos: TodoItem[]) => {
      WebSocketDebug.logTodosResponse(todos);
      this.todoItemsSubject.next(todos);
      WebSocketDebug.logSystemSummary(todos, this.socket);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ todo
    this.socket.on('addedTodo', (todo: TodoItem) => {
      WebSocketDebug.logTodoAdded(todo);
      const newTodos = [...this.todoItemsSubject.value, todo];
      this.todoItemsSubject.next(newTodos);
      WebSocketDebug.logSystemSummary(newTodos, this.socket);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è todo
    this.socket.on('updatedTodo', (todo: TodoItem) => {
      WebSocketDebug.logTodoUpdated(todo);
      const currentTodos = this.todoItemsSubject.value;
      const updatedTodos = currentTodos.map(t => t.id === todo.id ? todo : t);
      this.todoItemsSubject.next(updatedTodos);
      WebSocketDebug.logSystemSummary(updatedTodos, this.socket);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è todo
    this.socket.on('deletedTodo', (todoId: number) => {
      WebSocketDebug.logTodoDeleted(todoId);
      const currentTodos = this.todoItemsSubject.value;
      const filteredTodos = currentTodos.filter(t => t.id !== todoId);
      this.todoItemsSubject.next(filteredTodos);
      WebSocketDebug.logSystemSummary(filteredTodos, this.socket);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.socket.on('error', (error) => {
      WebSocketDebug.logWebSocketError(error, 'General Socket Error');
    });
  }

  public getTodos(): void {
    WebSocketDebug.logTodosFetch(this.socket);
    if (this.socket && this.socket.connected) {
      console.log('üîÑ [TODO SERVICE] Emitting getTodos request');
      this.socket.emit('getTodos');
      console.log('üîÑ [TODO SERVICE] Request sent successfully');
    } else {
      console.warn('üîÑ [TODO SERVICE] Socket not connected, attempting to reconnect...');
      WebSocketDebug.diagnoseWebSocketState(this.socket);
      this.reconnect();
    }
  }

  public saveTodo(todoItem: Omit<TodoItem, 'id'>): void {
    WebSocketDebug.logTodoCreation(todoItem, this.socket);
    if (this.socket && this.socket.connected) {
      console.log('üíæ [TODO SERVICE] Emitting addTodo request');
      this.socket.emit('addTodo', todoItem);
      console.log('üíæ [TODO SERVICE] Add request sent successfully');
    } else {
      console.warn('üíæ [TODO SERVICE] Socket not connected, attempting to reconnect...');
      WebSocketDebug.diagnoseWebSocketState(this.socket);
      this.reconnect();
    }
  }

  public updateTodo(todoItem: TodoItem): void {
    console.log('üîÑ [TODO SERVICE] === UPDATING TODO ===');
    console.log('üîÑ [TODO SERVICE] Todo being updated:', todoItem);
    WebSocketDebug.logOperation('updateTodo', todoItem, this.socket);
    
    if (this.socket && this.socket.connected) {
      console.log('üîÑ [TODO SERVICE] Emitting updateTodo request');
      this.socket.emit('updateTodo', todoItem);
      console.log('üîÑ [TODO SERVICE] Update request sent successfully');
    } else {
      console.warn('üîÑ [TODO SERVICE] Socket not connected, attempting to reconnect...');
      WebSocketDebug.diagnoseWebSocketState(this.socket);
      this.reconnect();
    }
    console.log('üîÑ [TODO SERVICE] === UPDATE END ===');
  }

  public deleteTodo(todoId: number): void {
    console.log('üóëÔ∏è [TODO SERVICE] === DELETING TODO ===');
    console.log('üóëÔ∏è [TODO SERVICE] Todo ID being deleted:', todoId);
    WebSocketDebug.logOperation('deleteTodo', { todoId }, this.socket);
    
    if (this.socket && this.socket.connected) {
      console.log('üóëÔ∏è [TODO SERVICE] Emitting deleteTodo request');
      this.socket.emit('deleteTodo', todoId);
      console.log('üóëÔ∏è [TODO SERVICE] Delete request sent successfully');
    } else {
      console.warn('üóëÔ∏è [TODO SERVICE] Socket not connected, attempting to reconnect...');
      WebSocketDebug.diagnoseWebSocketState(this.socket);
      this.reconnect();
    }
    console.log('üóëÔ∏è [TODO SERVICE] === DELETE END ===');
  }

  public disconnect(): void {
    if (this.socket) {
      console.log('üîå [WEBSOCKET] === DISCONNECTING ===');
      console.log('üîå [WEBSOCKET] Manually disconnecting WebSocket');
      WebSocketDebug.logOperation('disconnect', null, this.socket);
      this.socket.disconnect();
      this.socket = null;
      console.log('üîå [WEBSOCKET] === DISCONNECT COMPLETE ===');
    }
  }

  public reconnect(): void {
    console.log('üîÑ [WEBSOCKET] === RECONNECTING ===');
    console.log('üîÑ [WEBSOCKET] Initiating WebSocket reconnection...');
    WebSocketDebug.diagnoseWebSocketState(this.socket);
    this.disconnect();
    setTimeout(() => {
      console.log('üîÑ [WEBSOCKET] Starting reconnection after delay...');
      this.initializeSocket();
    }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    console.log('üîÑ [WEBSOCKET] === RECONNECT INITIATED ===');
  }

  public isConnected(): boolean {
    return this.socket?.connected || false;
  }
}
